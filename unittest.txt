
            bool printInfo = false;

            Board b1 = Board::Board("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
            auto gen1 = MoveGen::MoveGen(&b1);
            Assert::AreEqual(197281, gen1.PerftLegal(4, printInfo));

            Board b2 = Board::Board("r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - ");
            auto gen2 = MoveGen::MoveGen(&b2);
            Assert::AreEqual(4085603, gen2.PerftLegal(4, printInfo));

            Board b3 = Board::Board("8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - ");
            auto gen3 = MoveGen::MoveGen(&b3);
            Assert::AreEqual(43238, gen3.PerftLegal(4, printInfo));

            Board b4 = Board::Board("r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1");
            auto gen4 = MoveGen::MoveGen(&b4);
            Assert::AreEqual(422333, gen4.PerftLegal(4, printInfo));

            Board b5 = Board::Board("rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8");
            auto gen5 = MoveGen::MoveGen(&b5);
            Assert::AreEqual(2103487, gen5.PerftLegal(4, printInfo));

            Board b6 = Board::Board("r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10");
            auto gen6 = MoveGen::MoveGen(&b6);
            Assert::AreEqual(3894594, gen6.PerftLegal(4, printInfo));